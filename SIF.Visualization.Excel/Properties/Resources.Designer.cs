//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18444
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SIF.Visualization.Excel.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SIF.Visualization.Excel.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Failed to create or delete the debug file, check that you have write permissions for ähnelt.
        /// </summary>
        public static string DebugReadWriteError_MessageBoxText {
            get {
                return ResourceManager.GetString("DebugReadWriteError_MessageBoxText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Debug file error ähnelt.
        /// </summary>
        public static string DebugReadWriteError_MessageBoxTitle {
            get {
                return ResourceManager.GetString("DebugReadWriteError_MessageBoxTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Failed to create or delete the debug file, check that you have write permissions for  ähnelt.
        /// </summary>
        public static string DebugReadWriteErrorPre_MessageBoxText {
            get {
                return ResourceManager.GetString("DebugReadWriteErrorPre_MessageBoxText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die , or create it yourself. ähnelt.
        /// </summary>
        public static string DebugReadWriteErrorSuf_MessageBoxText {
            get {
                return ResourceManager.GetString("DebugReadWriteErrorSuf_MessageBoxText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die , or create it yourself. ähnelt.
        /// </summary>
        public static string DebugReadWriteErrorSuff_MessageBoxText {
            get {
                return ResourceManager.GetString("DebugReadWriteErrorSuff_MessageBoxText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SIF or JRE not installed ähnelt.
        /// </summary>
        public static string GlobalSettingsDialog_B_VerifySifPath_Click_SIF_or_JRE_not_installed {
            get {
                return ResourceManager.GetString("GlobalSettingsDialog_B_VerifySifPath_Click_SIF_or_JRE_not_installed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap input_clear {
            get {
                object obj = ResourceManager.GetObject("input_clear", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap inspectionpane {
            get {
                object obj = ResourceManager.GetObject("inspectionpane", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap intermediate_clear {
            get {
                object obj = ResourceManager.GetObject("intermediate_clear", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please install the Java version of SIF to the specified directory or choose a new one and install the Java Runtime Environment and add it to your PATH system variable ähnelt.
        /// </summary>
        public static string NoJreSifInstallationError_MessageBoxText {
            get {
                return ResourceManager.GetString("NoJreSifInstallationError_MessageBoxText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SIF or JRE not installed ähnelt.
        /// </summary>
        public static string NoJreSifInstallationError_MessageBoxTitle {
            get {
                return ResourceManager.GetString("NoJreSifInstallationError_MessageBoxTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please install the .NET version of SIF to the specified directory or choose a new one, install the Mono Runtime Environment and add it to your PATH system variable or enter via &quot;Browse...&quot; if you don&apos;t want to use the .NET framework and install the IKVM assemblies to the Assembly Cache ähnelt.
        /// </summary>
        public static string NoMonoSifInstallaionError_MessageBoxText {
            get {
                return ResourceManager.GetString("NoMonoSifInstallaionError_MessageBoxText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SIF or Mono Runtime Environment not installed ähnelt.
        /// </summary>
        public static string NoMonoSifInstallationError_MessageBoxTitle {
            get {
                return ResourceManager.GetString("NoMonoSifInstallationError_MessageBoxTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap output_clear {
            get {
                object obj = ResourceManager.GetObject("output_clear", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Background ähnelt.
        /// </summary>
        public static string tl_CellErrorInfo_Background {
            get {
                return ResourceManager.GetString("tl_CellErrorInfo_Background", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Possible Solution ähnelt.
        /// </summary>
        public static string tl_CellErrorInfo_PossibleSolution {
            get {
                return ResourceManager.GetString("tl_CellErrorInfo_PossibleSolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No ignored violations. Please ignore violations if this is necessary. ähnelt.
        /// </summary>
        public static string tl_IgnoreView_Empty {
            get {
                return ResourceManager.GetString("tl_IgnoreView_Empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die violation(s) in list ähnelt.
        /// </summary>
        public static string tl_IgnoreView_InList {
            get {
                return ResourceManager.GetString("tl_IgnoreView_InList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Untitled new scenario ähnelt.
        /// </summary>
        public static string tl_NewScenarioDialog_DefaultAnswer {
            get {
                return ResourceManager.GetString("tl_NewScenarioDialog_DefaultAnswer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please give your scenario a name: ähnelt.
        /// </summary>
        public static string tl_NewScenarioDialog_Question {
            get {
                return ResourceManager.GetString("tl_NewScenarioDialog_Question", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New Scenario... ähnelt.
        /// </summary>
        public static string tl_NewScenarioDialog_Title {
            get {
                return ResourceManager.GetString("tl_NewScenarioDialog_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cancel ähnelt.
        /// </summary>
        public static string tl_PolicyConfiguration_Button_Cancel {
            get {
                return ResourceManager.GetString("tl_PolicyConfiguration_Button_Cancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ok ähnelt.
        /// </summary>
        public static string tl_PolicyConfiguration_Button_Ok {
            get {
                return ResourceManager.GetString("tl_PolicyConfiguration_Button_Ok", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Always ähnelt.
        /// </summary>
        public static string tl_PolicyConfiguration_Label_Always {
            get {
                return ResourceManager.GetString("tl_PolicyConfiguration_Label_Always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Manual ähnelt.
        /// </summary>
        public static string tl_PolicyConfiguration_Label_Manual {
            get {
                return ResourceManager.GetString("tl_PolicyConfiguration_Label_Manual", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ask whether thousand separators are intended ähnelt.
        /// </summary>
        public static string tl_PolicyConfiguration_Label_ThousandSeparators {
            get {
                return ResourceManager.GetString("tl_PolicyConfiguration_Label_ThousandSeparators", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cells with #Errors ähnelt.
        /// </summary>
        public static string tl_PolicyConfiguration_Rule_CellsWithErrors {
            get {
                return ResourceManager.GetString("tl_PolicyConfiguration_Rule_CellsWithErrors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Constants in Formulas ähnelt.
        /// </summary>
        public static string tl_PolicyConfiguration_Rule_Constants {
            get {
                return ResourceManager.GetString("tl_PolicyConfiguration_Rule_Constants", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Formula Complexity ähnelt.
        /// </summary>
        public static string tl_PolicyConfiguration_Rule_FormulaComplexity {
            get {
                return ResourceManager.GetString("tl_PolicyConfiguration_Rule_FormulaComplexity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Non-considered constants ähnelt.
        /// </summary>
        public static string tl_PolicyConfiguration_Rule_NonConsideredConstants {
            get {
                return ResourceManager.GetString("tl_PolicyConfiguration_Rule_NonConsideredConstants", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die One among others ähnelt.
        /// </summary>
        public static string tl_PolicyConfiguration_Rule_OneAmongOthers {
            get {
                return ResourceManager.GetString("tl_PolicyConfiguration_Rule_OneAmongOthers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Reading direction ähnelt.
        /// </summary>
        public static string tl_PolicyConfiguration_Rule_ReadingDirection {
            get {
                return ResourceManager.GetString("tl_PolicyConfiguration_Rule_ReadingDirection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die References to blank cells ähnelt.
        /// </summary>
        public static string tl_PolicyConfiguration_Rule_ReferencesToBlankCells {
            get {
                return ResourceManager.GetString("tl_PolicyConfiguration_Rule_ReferencesToBlankCells", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Same reference multiple times ähnelt.
        /// </summary>
        public static string tl_PolicyConfiguration_Rule_SameMultipleRefs {
            get {
                return ResourceManager.GetString("tl_PolicyConfiguration_Rule_SameMultipleRefs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die String distance ähnelt.
        /// </summary>
        public static string tl_PolicyConfiguration_Rule_StringDistance {
            get {
                return ResourceManager.GetString("tl_PolicyConfiguration_Rule_StringDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Maximum distance: ähnelt.
        /// </summary>
        public static string tl_PolicyConfiguration_Rule_StringDistanceExtra {
            get {
                return ResourceManager.GetString("tl_PolicyConfiguration_Rule_StringDistanceExtra", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Policy Configuration ähnelt.
        /// </summary>
        public static string tl_PolicyConfiguration_WindowTitle {
            get {
                return ResourceManager.GetString("tl_PolicyConfiguration_WindowTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input Cell ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaDefine_Inputcell {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaDefine_Inputcell", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Defines a Input Cell. ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaDefine_InputcellTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaDefine_InputcellTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Intermediate Cell ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaDefine_Intermediatecell {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaDefine_Intermediatecell", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Defines a Intermediate Cell. ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaDefine_IntermediatecellTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaDefine_IntermediatecellTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Result Cell ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaDefine_Resultcell {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaDefine_Resultcell", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Defines a Result Cell. ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaDefine_ResultcellTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaDefine_ResultcellTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Define Scenario Cells ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaDefine_Title {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaDefine_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Global Settings ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaMiscellaneous_GlobalSettingsButton {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaMiscellaneous_GlobalSettingsButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Show sanity controls ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaMiscellaneous_ShowSanity {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaMiscellaneous_ShowSanity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Miscellaneous ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaMiscellaneous_Title {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaMiscellaneous_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Automatic scans ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScan_AutomaticScansCheckbox {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScan_AutomaticScansCheckbox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScan_AutomaticScansCheckboxTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScan_AutomaticScansCheckboxTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Policy configuration ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScan_PolicyConfigurationButton {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScan_PolicyConfigurationButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScan_PolicyConfigurationButtonTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScan_PolicyConfigurationButtonTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scan ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScan_ScanButton {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScan_ScanButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scans the current workbook with all scenarios. ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScan_ScanButtonTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScan_ScanButtonTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Test ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScan_Title {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScan_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cancel ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScenario_CancelButton {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScenario_CancelButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Discard this scenario ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScenario_CancelButtonTolltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScenario_CancelButtonTolltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScenario_NewButton {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScenario_NewButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Creates a new scenario ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScenario_NewButtonTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScenario_NewButtonTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Save ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScenario_SaveButton {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScenario_SaveButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Save this scenario ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScenario_SaveButtonTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScenario_SaveButtonTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scenario ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScenario_Title {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScenario_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Inspection Pane ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaView_PaneButton {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaView_PaneButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Opens a pane with the cell definitions, scenario overview and findings. ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaView_PaneButtonTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaView_PaneButtonTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Reset document ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaView_ResetButton {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaView_ResetButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Resets the document to the state before the test execution. ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaView_ResetButtonTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaView_ResetButtonTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die View ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaView_Title {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaView_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die INSPECTION ähnelt.
        /// </summary>
        public static string tl_Ribbon_Title {
            get {
                return ResourceManager.GetString("tl_Ribbon_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Background: ähnelt.
        /// </summary>
        public static string tl_ViolationTemplate_Background {
            get {
                return ResourceManager.GetString("tl_ViolationTemplate_Background", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Description: ähnelt.
        /// </summary>
        public static string tl_ViolationTemplate_Description {
            get {
                return ResourceManager.GetString("tl_ViolationTemplate_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die First occurence: ähnelt.
        /// </summary>
        public static string tl_ViolationTemplate_FirstOccurence {
            get {
                return ResourceManager.GetString("tl_ViolationTemplate_FirstOccurence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Less details ähnelt.
        /// </summary>
        public static string tl_ViolationTemplate_LessDetails {
            get {
                return ResourceManager.GetString("tl_ViolationTemplate_LessDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die More details ähnelt.
        /// </summary>
        public static string tl_ViolationTemplate_MoreDetails {
            get {
                return ResourceManager.GetString("tl_ViolationTemplate_MoreDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Possible solution: ähnelt.
        /// </summary>
        public static string tl_ViolationTemplate_PossibleSolution {
            get {
                return ResourceManager.GetString("tl_ViolationTemplate_PossibleSolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Type: ähnelt.
        /// </summary>
        public static string tl_ViolationTemplate_Type {
            get {
                return ResourceManager.GetString("tl_ViolationTemplate_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die violation(s) in list ähnelt.
        /// </summary>
        public static string tl_ViolationView_Footer {
            get {
                return ResourceManager.GetString("tl_ViolationView_Footer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ignore ähnelt.
        /// </summary>
        public static string tl_ViolationView_Ignore {
            get {
                return ResourceManager.GetString("tl_ViolationView_Ignore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die later ähnelt.
        /// </summary>
        public static string tl_ViolationView_Later {
            get {
                return ResourceManager.GetString("tl_ViolationView_Later", resourceCulture);
            }
        }
    }
}
